// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: amannn/action-semantic-pull-request@v5.0.2
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
.DS_Store
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
",
  ".projen/files.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "files": Array [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "tasks": Object {
      "build": Object {
        "description": "Full release build",
        "name": "build",
        "steps": Array [
          Object {
            "spawn": "default",
          },
          Object {
            "spawn": "pre-compile",
          },
          Object {
            "spawn": "compile",
          },
          Object {
            "spawn": "post-compile",
          },
          Object {
            "spawn": "test",
          },
          Object {
            "spawn": "package",
          },
        ],
      },
      "clobber": Object {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": Object {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": Array [
          Object {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in \\"scratch\\" branch",
          },
          Object {
            "exec": "git checkout $BRANCH",
          },
          Object {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          Object {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          Object {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          Object {
            "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
          },
        ],
      },
      "compile": Object {
        "description": "Only compile",
        "name": "compile",
      },
      "default": Object {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": Object {
        "description": "Remove projen from the project",
        "env": Object {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": Array [
          Object {
            "spawn": "default",
          },
        ],
      },
      "package": Object {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": Object {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": Object {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": Object {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "Introductory Skill so that Skill Authors can see how an OVOS Skill is put together

## About

Information about your skill

## Examples

- \\"Hello world\\"
- \\"How are you?\\"
- \\"Thank you\\"

## Credits

Joe User (@joeuser)

## Category

TODO:

## Tags

TODO:
",
  "requirements.txt": "ovos-utils
ovos-bus-client
ovos-workshop",
  "setup.py": "#!/usr/bin/env python3
from setuptools import setup
import os
from os import walk, path

BASEDIR = path.abspath(path.dirname(__file__))
URL = \\"PLACEHOLDER\\"
SKILL_CLAZZ = \\"HelloWorldSkill\\"  # needs to match __init__.py class name
PYPI_NAME = \\"ovos-hello-world-skill\\"  # pip install PYPI_NAME

# below derived from github url to ensure standard skill_id
SKILL_AUTHOR, SKILL_NAME = URL.split(\\".com/\\")[-1].split(\\"/\\")
SKILL_PKG = SKILL_NAME.lower().replace(\\"-\\", \\"_\\")
PLUGIN_ENTRY_POINT = f\\"{SKILL_NAME.lower()}.{SKILL_AUTHOR.lower()}={SKILL_PKG}:{SKILL_CLAZZ}\\"
# skill_id=package_name:SkillClass


def get_requirements(requirements_filename: str):
    requirements_file = path.join(path.abspath(path.dirname(__file__)), requirements_filename)
    with open(requirements_file, \\"r\\", encoding=\\"utf-8\\") as r:
        requirements = r.readlines()
    requirements = [r.strip() for r in requirements if r.strip() and not r.strip().startswith(\\"#\\")]
    if \\"MYCROFT_LOOSE_REQUIREMENTS\\" in os.environ:
        print(\\"USING LOOSE REQUIREMENTS!\\")
        requirements = [r.replace(\\"==\\", \\">=\\").replace(\\"~=\\", \\">=\\") for r in requirements]
    return requirements


def find_resource_files():
    resource_base_dirs = (\\"locale\\", \\"intents\\", \\"dialog\\", \\"vocab\\", \\"regex\\", \\"ui\\")
    base_dir = path.dirname(__file__)
    package_data = [\\"*.json\\"]
    for res in resource_base_dirs:
        if path.isdir(path.join(base_dir, res)):
            for directory, _, files in walk(path.join(base_dir, res)):
                if files:
                    package_data.append(path.join(directory.replace(base_dir, \\"\\").lstrip(\\"/\\"), \\"*\\"))
    return package_data


with open(\\"README.md\\", \\"r\\") as f:
    long_description = f.read()

with open(\\"/version.py\\", \\"r\\", encoding=\\"utf-8\\") as v:
    for line in v.readlines():
        if line.startswith(\\"__version__\\"):
            if '\\"' in line:
                version = line.split('\\"')[1]
            else:
                version = line.split(\\"'\\")[1]

setup(
    name=PYPI_NAME,
    version=version,
    description=\\"\\",
    long_description=long_description,
    url=URL,
    author=\\"Joe Placeholder\\",
    author_email=\\"joe@placeholder.com\\",
    license=\\"Apache-2.0\\",
    package_dir={SKILL_PKG: \\"\\"},
    package_data={SKILL_PKG: find_resource_files()},
    packages=[SKILL_PKG],
    include_package_data=True,
    install_requires=get_requirements(\\"requirements.txt\\"),
    keywords=\\"ovos skill voice assistant\\",
    entry_points={\\"ovos.plugin.skill\\": PLUGIN_ENTRY_POINT},
)
",
  "skill.json": Object {},
  "src/__init__.py": "from ovos_utils import classproperty
from ovos_utils.intents import IntentBuilder
from ovos_utils.process_utils import RuntimeRequirements
from ovos_workshop.decorators import intent_handler
from ovos_workshop.skills import OVOSSkill


class HelloWorldSkill(OVOSSkill):
    def __init__(self, *args, **kwargs):
        \\"\\"\\"The __init__ method is called when the Skill is first constructed.
        Note that self.bus, self.skill_id, self.settings, and
        other base class settings are only available after the call to super().

        This is a good place to load and pre-process any data needed by your
        Skill, ideally after the super() call.
        \\"\\"\\"
        super().__init__(*args, **kwargs)
        self.learning = True

    @classproperty
    def runtime_requirements(self):
        return RuntimeRequirements(
            internet_before_load=False,
            network_before_load=False,
            gui_before_load=False,
            requires_internet=False,
            requires_network=False,
            requires_gui=False,
            no_internet_fallback=True,
            no_network_fallback=True,
            no_gui_fallback=True,
        )

    @property
    def get_my_setting(self):
        \\"\\"\\"Dynamically get the my_setting from the skill settings file.
        If it doesn't exist, return the default value.
        This will reflect live changes to settings.json files (local or from backend)
        \\"\\"\\"
        return self.settings.get(\\"my_setting\\", \\"default_value\\")

    @intent_handler(\\"HowAreYou.intent\\")
    def handle_how_are_you_intent(self, message):
        \\"\\"\\"This is a Padatious intent handler.
        It is triggered using a list of sample phrases.\\"\\"\\"
        self.speak_dialog(\\"hello.world\\")

    @intent_handler(IntentBuilder(\\"HelloWorldIntent\\").require(\\"HelloWorldKeyword\\"))
    def handle_hello_world_intent(self, message):
        \\"\\"\\"This is an Adapt intent handler, it is triggered by a keyword.
        Skills can log useful information. These will appear in the CLI and
        the skills.log file.\\"\\"\\"
        self.log.info(\\"There are five types of log messages: \\" \\"info, debug, warning, error, and exception.\\")
        self.speak_dialog(\\"hello.world\\")

    @intent_handler(IntentBuilder(\\"RoboticsLawsIntent\\").require(\\"LawKeyword\\").build())
    def handle_robotic_laws_intent(self, message):
        \\"\\"\\"This is an Adapt intent handler, but using a RegEx intent.\\"\\"\\"
        # Optionally, get the RegEx group from the intent message
        # law = str(message.data.get(\\"LawOfRobotics\\", \\"all\\"))
        self.speak_dialog(\\"robotics\\")

    def stop(self):
        \\"\\"\\"Optional action to take when \\"stop\\" is requested by the user.
        This method should return True if it stopped something or
        False (or None) otherwise.
        If not relevant to your skill, feel free to remove.
        \\"\\"\\"
        return
",
  "src/locale/en-us/dialog/hello_world.dialog": "hello world!
hullo world!",
  "src/locale/en-us/dialog/robotics.dialog": "I am not bound by the laws of robotics",
  "src/locale/en-us/intents/HowAreYou.intent": "how are you( doing|)
how have you been
how has your day been",
  "src/locale/en-us/regex/Law.rx": "(the|is) (?P<LawOfRobotics>.*) (law of robotic|law of robotics)",
  "src/locale/en-us/vocab/HelloWorldKeyword.voc": "hello world
greetings",
  "src/settingsmeta.yaml": "skillMetadata:
  sections:
    - name: Label Field Example
      fields:
        - type: label
          label: This is descriptive text.
    - name: Email Field Example
      fields:
        - name: my_email_address
          type: email
          label: Enter your email address
          value:
    - name: Password Field Example
      fields:
        - name: my_password
          type: password
          label: Enter your password
          value:
    # - name: Checkbox Field Example
    #   fields:
    #     - name: my_boolean
    #       type: checkbox
    #       label: This is an example checkbox. It creates a Boolean value.
    #       value: \\"false\\" # OVOS expects a string of \\"true\\" or \\"false\\" rather than a Boolean
    # - name: Number Field Example
    #   fields:
    #     - name: my_number
    #       type: number
    #       label: Enter any number
    #       value: 7
    # - name: Select Field Example
    #   fields:
    #     - name: my_selected_option
    #       type: select
    #       label: Select an option
    #       options: Option 1|option_one;Option 2|option_two;Option 3|option_three
    #       value: option_one
",
  "src/version.py": "__version__ = 0.0.1
",
}
`;
